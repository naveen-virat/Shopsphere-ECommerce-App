E-Commerce MongoDB CLI (Spring Boot)
â”‚
â”œâ”€â”€ pom.xml                                   # Maven configuration with Spring Boot dependencies
â”œâ”€â”€ .gitignore                                # Git ignore patterns
â”œâ”€â”€ README.md                                 # Comprehensive documentation
â”œâ”€â”€ QUICKSTART.md                             # Quick setup guide
â”œâ”€â”€ PROJECT_SUMMARY.md                        # Project overview
â”‚
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ main/
â”‚   â”‚   â”œâ”€â”€ java/
â”‚   â”‚   â”‚   â””â”€â”€ com/
â”‚   â”‚   â”‚       â””â”€â”€ ecommerce/
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â”œâ”€â”€ model/                # Entity classes (MongoDB documents)
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ Product.java      # Product entity (@Document)
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ User.java         # User entity (@Document)
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ Cart.java         # Cart entity (@Document)
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ CartItem.java     # Cart item (embedded)
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ Order.java        # Order entity (@Document)
â”‚   â”‚   â”‚           â”‚   â””â”€â”€ OrderItem.java    # Order item (embedded)
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â”œâ”€â”€ repository/           # Spring Data MongoDB repositories
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ ProductRepository.java   # Product CRUD + custom queries
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ UserRepository.java      # User CRUD + findByEmail
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ CartRepository.java      # Cart CRUD + findByUserId
â”‚   â”‚   â”‚           â”‚   â””â”€â”€ OrderRepository.java     # Order CRUD + findByUserId
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â”œâ”€â”€ service/              # Business logic layer (@Service)
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ ProductService.java      # Product operations + stock mgmt
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ UserService.java         # User registration + login
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ CartService.java         # Cart management + validation
â”‚   â”‚   â”‚           â”‚   â””â”€â”€ OrderService.java        # Order processing + payment
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â”œâ”€â”€ util/                 # Utility classes
â”‚   â”‚   â”‚           â”‚   â”œâ”€â”€ InputValidator.java      # Validation logic
â”‚   â”‚   â”‚           â”‚   â””â”€â”€ IdGenerator.java         # Custom ID generation
â”‚   â”‚   â”‚           â”‚
â”‚   â”‚   â”‚           â”œâ”€â”€ ECommerceApplication.java    # @SpringBootApplication main
â”‚   â”‚   â”‚           â””â”€â”€ ECommerceCLI.java            # CLI interface (CommandLineRunner)
â”‚   â”‚   â”‚
â”‚   â”‚   â””â”€â”€ resources/
â”‚   â”‚       â””â”€â”€ application.properties        # MongoDB configuration
â”‚   â”‚
â”‚   â””â”€â”€ test/
â”‚       â””â”€â”€ java/                             # Test classes (optional)
â”‚
â””â”€â”€ target/                                   # Maven build output (auto-generated)

================================================================================
PACKAGE DETAILS
================================================================================

ðŸ“¦ com.ecommerce.model
   - Product.java (245 lines)
     â€¢ Fields: id, name, category, description, price, stockQuantity
     â€¢ Annotations: @Document, @Id
     â€¢ Methods: getters, setters, toString()

   - User.java (195 lines)
     â€¢ Fields: id, name, email, password, address
     â€¢ Annotations: @Document, @Id, @Indexed(unique=true)
     â€¢ Methods: getters, setters, toString()

   - Cart.java (285 lines)
     â€¢ Fields: id, userId, items, totalAmount
     â€¢ Annotations: @Document, @Id, @Indexed(unique=true)
     â€¢ Methods: addItem(), removeItem(), calculateTotal(), clearCart()

   - CartItem.java (145 lines)
     â€¢ Fields: productId, productName, price, quantity
     â€¢ Methods: getSubtotal(), toString()

   - Order.java (265 lines)
     â€¢ Fields: id, userId, items, orderDate, totalAmount, paymentStatus
     â€¢ Annotations: @Document, @Id
     â€¢ Methods: getters, setters, toString()

   - OrderItem.java (125 lines)
     â€¢ Fields: productId, productName, price, quantity
     â€¢ Methods: getSubtotal(), toString()

ðŸ“¦ com.ecommerce.repository (Spring Data MongoDB)
   - ProductRepository.java (45 lines)
     â€¢ Extends: MongoRepository<Product, String>
     â€¢ Custom queries: findByCategory, findByNameContaining, findByStockQuantity

   - UserRepository.java (42 lines)
     â€¢ Extends: MongoRepository<User, String>
     â€¢ Custom queries: findByEmail, existsByEmail, findByEmailAndPassword

   - CartRepository.java (38 lines)
     â€¢ Extends: MongoRepository<Cart, String>
     â€¢ Custom queries: findByUserId, deleteByUserId, existsByUserId

   - OrderRepository.java (48 lines)
     â€¢ Extends: MongoRepository<Order, String>
     â€¢ Custom queries: findByUserId, findByPaymentStatus, countByUserId

ðŸ“¦ com.ecommerce.service (Business Logic)
   - ProductService.java (190 lines)
     â€¢ Methods: addProduct, getAllProducts, updateProduct, deleteProduct,
                updateStock, hasStock, searchProducts, filterByCategory

   - UserService.java (155 lines)
     â€¢ Methods: registerUser, loginUser, getUserById, updateUser,
                deleteUser, emailExists

   - CartService.java (195 lines)
     â€¢ Methods: getOrCreateCart, addToCart, removeFromCart, updateQuantity,
                viewCart, clearCart, isCartEmpty

   - OrderService.java (205 lines)
     â€¢ Methods: placeOrder, processPayment, getUserOrders, getOrderById,
                cancelOrder, getUserOrderCount

ðŸ“¦ com.ecommerce.util (Utilities)
   - InputValidator.java (95 lines)
     â€¢ Methods: isValidEmail, isValidPrice, isValidQuantity, isValidPassword,
                isNotEmpty, sanitize

   - IdGenerator.java (48 lines)
     â€¢ Methods: generateProductId, generateUserId, generateOrderId

ðŸ“¦ com.ecommerce (Main Package)
   - ECommerceApplication.java (16 lines)
     â€¢ Main class with @SpringBootApplication
     â€¢ Entry point: SpringApplication.run()

   - ECommerceCLI.java (665 lines)
     â€¢ @Component implementing CommandLineRunner
     â€¢ Complete CLI menu system
     â€¢ Methods: showLoginMenu, showMainMenu, login, register,
                productCatalogMenu, shoppingCartMenu, ordersMenu, checkout

================================================================================
CONFIGURATION FILES
================================================================================

ðŸ“„ pom.xml (68 lines)
   Dependencies:
   - spring-boot-starter-data-mongodb
   - spring-boot-starter
   - lombok (optional)
   - spring-boot-starter-test

ðŸ“„ application.properties (8 lines)
   - spring.data.mongodb.host=localhost
   - spring.data.mongodb.port=27017
   - spring.data.mongodb.database=ecommerce_db
   - Logging configuration

ðŸ“„ .gitignore (48 lines)
   - Maven target/
   - IDE files (.idea, .classpath, etc.)
   - OS files (.DS_Store, Thumbs.db)
   - Log files

================================================================================
DOCUMENTATION FILES
================================================================================

ðŸ“„ README.md (550+ lines)
   - Complete project documentation
   - Features, technologies, setup instructions
   - Sample output, database schema
   - API overview, testing guide

ðŸ“„ QUICKSTART.md (180+ lines)
   - Quick setup guide for Windows
   - Prerequisites checklist
   - Step-by-step installation
   - Common issues & solutions
   - Testing workflow

ðŸ“„ PROJECT_SUMMARY.md (350+ lines)
   - Project overview and architecture
   - Feature checklist
   - Technology stack
   - Code quality features
   - Learning outcomes

================================================================================
TOTAL PROJECT STATISTICS
================================================================================

Java Files:           19
Configuration Files:   3
Documentation Files:   4
Total Lines of Code:  ~3,500+ (including comments and documentation)

Packages:             5 (model, repository, service, util, main)
Classes:              19
Interfaces:           4 (repositories)
Annotations Used:     @SpringBootApplication, @Service, @Repository, @Component,
                      @Autowired, @Document, @Id, @Indexed

MongoDB Collections:  4 (products, users, carts, orders)
Custom ID Format:     P001, U001, O001 (sequential, zero-padded)

================================================================================
FEATURES IMPLEMENTED
================================================================================

âœ… Product Management      (Add, View, Update, Delete, Search, Filter)
âœ… User Management         (Register, Login, Profile)
âœ… Shopping Cart           (Add, Remove, Update, View, Clear)
âœ… Order Management        (Place, View, Payment, History)
âœ… Input Validation        (Email, Password, Price, Quantity)
âœ… Stock Management        (Track, Validate, Update)
âœ… ID Generation          (Custom format: P001, U001, O001)
âœ… CLI Menu System        (Multi-level, User-friendly)
âœ… Sample Data Loading    (8 products across 5 categories)
âœ… Error Handling         (Try-catch, Validation, Messages)

================================================================================
SPRING BOOT FEATURES USED
================================================================================

âœ… Auto-configuration          (@SpringBootApplication)
âœ… Dependency Injection        (@Autowired)
âœ… Component Scanning          (@Component, @Service, @Repository)
âœ… Spring Data MongoDB         (MongoRepository, custom queries)
âœ… CommandLineRunner          (CLI execution after startup)
âœ… Properties Configuration    (application.properties)
âœ… MongoDB Annotations        (@Document, @Id, @Indexed)

================================================================================

Project Type:        Spring Boot CLI Application
Framework Version:   Spring Boot 3.1.5
Java Version:        17
Database:           MongoDB
Build Tool:         Maven
Architecture:       Layered (Repository â†’ Service â†’ CLI)
Status:             âœ… COMPLETE & READY TO RUN

================================================================================

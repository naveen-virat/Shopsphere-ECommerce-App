package com.ecommerce.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.index.Indexed;

import java.util.ArrayList;
import java.util.List;

/**
 * Cart entity representing a user's shopping cart.
 * Contains user ID, list of cart items, and total amount.
 */
@Document(collection = "carts")
public class Cart {
    @Id
    private String id;                  // Cart ID (auto-generated by MongoDB)
    
    @Indexed(unique = true)
    private String userId;              // User ID who owns this cart
    private List<CartItem> items;       // List of items in the cart
    private double totalAmount;         // Total amount of all items

    /**
     * Default constructor for Cart.
     */
    public Cart() {
        this.items = new ArrayList<>();
        this.totalAmount = 0.0;
    }

    /**
     * Parameterized constructor for Cart.
     *
     * @param userId User ID
     */
    public Cart(String userId) {
        this.userId = userId;
        this.items = new ArrayList<>();
        this.totalAmount = 0.0;
    }

    // Getters and Setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public List<CartItem> getItems() {
        return items;
    }

    public void setItems(List<CartItem> items) {
        this.items = items;
        calculateTotal();
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public void setTotalAmount(double totalAmount) {
        this.totalAmount = totalAmount;
    }

    /**
     * Calculate the total amount of all items in the cart.
     */
    public void calculateTotal() {
        this.totalAmount = items.stream()
                .mapToDouble(CartItem::getSubtotal)
                .sum();
    }

    /**
     * Add an item to the cart.
     *
     * @param item CartItem to add
     */
    public void addItem(CartItem item) {
        // Check if item already exists, update quantity
        for (CartItem existingItem : items) {
            if (existingItem.getProductId().equals(item.getProductId())) {
                existingItem.setQuantity(existingItem.getQuantity() + item.getQuantity());
                calculateTotal();
                return;
            }
        }
        // If not exists, add new item
        items.add(item);
        calculateTotal();
    }

    /**
     * Remove an item from the cart by product ID.
     *
     * @param productId Product ID to remove
     * @return true if removed, false otherwise
     */
    public boolean removeItem(String productId) {
        boolean removed = items.removeIf(item -> item.getProductId().equals(productId));
        if (removed) {
            calculateTotal();
        }
        return removed;
    }

    /**
     * Clear all items from the cart.
     */
    public void clearCart() {
        items.clear();
        totalAmount = 0.0;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Shopping Cart for User: ").append(userId).append("\n");
        sb.append("=".repeat(70)).append("\n");
        
        if (items.isEmpty()) {
            sb.append("Cart is empty.\n");
        } else {
            for (int i = 0; i < items.size(); i++) {
                sb.append((i + 1)).append(". ").append(items.get(i).toString()).append("\n");
            }
            sb.append("=".repeat(70)).append("\n");
            sb.append(String.format("Total Amount: $%.2f\n", totalAmount));
        }
        
        return sb.toString();
    }
}
